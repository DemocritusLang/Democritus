type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | DOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | LET
  | RETURN
  | IF
  | ELSE
  | FOR
  | INT
  | BOOL
  | VOID
  | STRTYPE
  | FUNCTION
  | STRUCT
  | STRING of (string)
  | LITERAL of (int)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 5 "parser.mly"
open Ast;;

let first (a,_,_) = a;;
let second (_,b,_) = b;;
let third (_,_,c) = c;;
# 50 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* DOT *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* AND *);
  279 (* OR *);
  280 (* LET *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* INT *);
  286 (* BOOL *);
  287 (* VOID *);
  288 (* STRTYPE *);
  289 (* FUNCTION *);
  290 (* STRUCT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  291 (* STRING *);
  292 (* LITERAL *);
  293 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\006\000\006\000\
\010\000\010\000\007\000\007\000\007\000\007\000\007\000\008\000\
\008\000\003\000\005\000\009\000\009\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\013\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\014\000\
\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\002\000\000\000\
\002\000\004\000\005\000\000\000\002\000\002\000\002\000\003\000\
\003\000\005\000\007\000\009\000\005\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\005\000\002\000\002\000\003\000\004\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\060\000\000\000\000\000\000\000\000\000\001\000\
\003\000\004\000\005\000\000\000\000\000\000\000\011\000\012\000\
\013\000\014\000\000\000\000\000\000\000\016\000\015\000\018\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\019\000\
\017\000\000\000\000\000\016\000\010\000\000\000\000\000\000\000\
\020\000\006\000\000\000\000\000\033\000\034\000\000\000\000\000\
\000\000\036\000\032\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\025\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\033\000\010\000\011\000\026\000\020\000\028\000\
\039\000\027\000\053\000\054\000\084\000\086\000\087\000"

let yysindex = "\004\000\
\000\000\000\000\000\000\001\000\231\254\008\255\009\255\000\000\
\000\000\000\000\000\000\242\254\055\255\054\255\000\000\000\000\
\000\000\000\000\022\255\068\255\035\255\000\000\000\000\000\000\
\242\254\079\255\080\255\001\255\000\000\242\254\052\255\000\000\
\000\000\090\255\242\254\000\000\000\000\075\255\076\255\071\255\
\000\000\000\000\071\255\071\255\000\000\000\000\040\255\098\255\
\101\255\000\000\000\000\000\255\000\000\134\000\071\001\112\255\
\096\255\096\255\000\000\153\000\071\255\071\255\071\255\071\255\
\000\000\071\255\071\255\071\255\071\255\073\255\071\255\071\255\
\071\255\071\255\071\255\071\255\071\255\071\255\000\000\000\000\
\000\000\088\001\105\001\104\255\122\001\115\255\109\255\122\001\
\034\255\034\255\096\255\096\255\108\255\168\001\168\001\157\255\
\157\255\157\255\157\255\155\001\139\001\214\255\214\255\071\255\
\000\000\071\255\071\255\095\255\000\000\172\000\122\001\122\001\
\214\255\071\255\000\000\122\001\122\255\214\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\124\255\000\000\000\000\000\000\
\000\000\000\000\125\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\148\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\251\255\000\000\000\000\000\000\000\000\
\046\000\069\000\000\000\000\000\000\000\128\255\127\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\255\000\000\050\255\000\000\133\255\084\255\
\195\000\218\000\092\000\115\000\023\000\048\255\120\255\241\000\
\008\001\031\001\054\001\156\255\007\255\000\000\000\000\000\000\
\000\000\000\000\000\000\184\255\000\000\000\000\062\255\092\255\
\000\000\079\255\000\000\136\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\137\000\000\000\000\000\000\000\240\255\108\000\
\104\000\000\000\193\255\216\255\032\000\000\000\000\000"

let yytablesize = 699
let yytable = "\055\000\
\008\000\063\000\057\000\058\000\001\000\032\000\060\000\048\000\
\029\000\048\000\064\000\012\000\048\000\034\000\015\000\016\000\
\017\000\018\000\037\000\019\000\082\000\083\000\085\000\088\000\
\005\000\089\000\090\000\091\000\092\000\048\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\108\000\109\000\
\059\000\040\000\068\000\069\000\013\000\014\000\070\000\043\000\
\041\000\115\000\041\000\044\000\058\000\041\000\119\000\058\000\
\021\000\022\000\023\000\045\000\046\000\041\000\041\000\110\000\
\059\000\111\000\112\000\059\000\024\000\041\000\041\000\025\000\
\040\000\116\000\050\000\051\000\052\000\040\000\043\000\041\000\
\042\000\030\000\044\000\043\000\053\000\031\000\053\000\044\000\
\035\000\053\000\045\000\046\000\050\000\036\000\050\000\045\000\
\046\000\050\000\005\000\061\000\047\000\048\000\062\000\049\000\
\104\000\050\000\051\000\052\000\070\000\093\000\050\000\051\000\
\052\000\040\000\106\000\041\000\080\000\105\000\107\000\043\000\
\042\000\113\000\042\000\044\000\118\000\042\000\007\000\008\000\
\030\000\056\000\031\000\045\000\046\000\042\000\042\000\057\000\
\047\000\048\000\031\000\049\000\009\000\042\000\042\000\038\000\
\056\000\117\000\050\000\051\000\052\000\020\000\000\000\020\000\
\020\000\000\000\000\000\020\000\047\000\000\000\047\000\020\000\
\000\000\047\000\000\000\066\000\067\000\068\000\069\000\020\000\
\020\000\070\000\000\000\000\000\020\000\020\000\000\000\020\000\
\000\000\047\000\047\000\000\000\000\000\000\000\020\000\020\000\
\020\000\026\000\000\000\026\000\026\000\000\000\000\000\026\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\000\000\000\000\000\000\
\026\000\026\000\000\000\026\000\000\000\000\000\000\000\040\000\
\000\000\041\000\026\000\026\000\026\000\043\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\046\000\000\000\000\000\000\000\047\000\048\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\035\000\000\000\035\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\049\000\
\005\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\006\000\007\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\051\000\000\000\
\051\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\000\000\000\000\051\000\051\000\052\000\000\000\052\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\000\000\052\000\052\000\039\000\000\000\039\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
\000\000\039\000\039\000\040\000\000\000\040\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\065\000\000\000\
\040\000\040\000\000\000\000\000\066\000\067\000\068\000\069\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\081\000\000\000\077\000\078\000\000\000\000\000\066\000\
\067\000\068\000\069\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\114\000\000\000\077\000\078\000\
\000\000\000\000\066\000\067\000\068\000\069\000\000\000\000\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\077\000\078\000\037\000\000\000\037\000\000\000\000\000\
\037\000\037\000\037\000\000\000\000\000\000\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\037\000\037\000\038\000\000\000\038\000\000\000\000\000\038\000\
\038\000\038\000\000\000\000\000\000\000\000\000\000\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\000\000\038\000\
\038\000\043\000\000\000\043\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\000\000\043\000\043\000\
\044\000\000\000\044\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\000\000\044\000\044\000\045\000\
\000\000\045\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\046\000\000\000\
\046\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\079\000\000\000\046\000\046\000\066\000\067\000\068\000\
\069\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\102\000\000\000\077\000\078\000\066\000\067\000\
\068\000\069\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\103\000\000\000\077\000\078\000\066\000\
\067\000\068\000\069\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\077\000\078\000\
\066\000\067\000\068\000\069\000\000\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\077\000\
\078\000\066\000\067\000\068\000\069\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\000\000\
\077\000\066\000\067\000\068\000\069\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\066\000\067\000\
\068\000\069\000\000\000\000\000\070\000\000\000\000\000\073\000\
\074\000\075\000\076\000"

let yycheck = "\040\000\
\000\000\002\001\043\000\044\000\001\000\005\001\047\000\001\001\
\025\000\003\001\011\001\037\001\006\001\030\000\029\001\030\001\
\031\001\032\001\035\000\034\001\061\000\062\000\063\000\064\000\
\024\001\066\000\067\000\068\000\069\000\023\001\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\102\000\103\000\
\001\001\002\001\009\001\010\001\037\001\037\001\013\001\008\001\
\001\001\113\000\003\001\012\001\003\001\006\001\118\000\006\001\
\002\001\004\001\037\001\020\001\021\001\014\001\015\001\104\000\
\003\001\106\000\107\000\006\001\001\001\022\001\023\001\037\001\
\002\001\114\000\035\001\036\001\037\001\002\001\008\001\004\001\
\005\001\003\001\012\001\008\001\001\001\006\001\003\001\012\001\
\037\001\006\001\020\001\021\001\001\001\004\001\003\001\020\001\
\021\001\006\001\024\001\002\001\025\001\026\001\002\001\028\001\
\001\001\035\001\036\001\037\001\013\001\037\001\035\001\036\001\
\037\001\002\001\006\001\004\001\005\001\003\001\011\001\008\001\
\001\001\027\001\003\001\012\001\003\001\006\001\003\001\003\001\
\001\001\003\001\001\001\020\001\021\001\014\001\015\001\003\001\
\025\001\026\001\003\001\028\001\004\000\022\001\023\001\036\000\
\041\000\114\000\035\001\036\001\037\001\002\001\255\255\004\001\
\005\001\255\255\255\255\008\001\001\001\255\255\003\001\012\001\
\255\255\006\001\255\255\007\001\008\001\009\001\010\001\020\001\
\021\001\013\001\255\255\255\255\025\001\026\001\255\255\028\001\
\255\255\022\001\023\001\255\255\255\255\255\255\035\001\036\001\
\037\001\002\001\255\255\004\001\005\001\255\255\255\255\008\001\
\255\255\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\255\255\255\255\255\255\002\001\
\255\255\004\001\035\001\036\001\037\001\008\001\255\255\255\255\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\001\001\
\024\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\033\001\034\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\001\001\255\255\
\022\001\023\001\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\001\001\255\255\022\001\023\001\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\001\001\255\255\022\001\023\001\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\003\001\255\255\022\001\023\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\003\001\255\255\022\001\023\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\003\001\255\255\022\001\023\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  DOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  LET\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRTYPE\000\
  FUNCTION\000\
  STRUCT\000\
  EOF\000\
  "

let yynames_block = "\
  STRING\000\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 39 "parser.mly"
            ( _1 )
# 406 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                 ( [], [], [] )
# 412 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( (_2 :: first _1), second _1, third _1 )
# 420 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( first _1, (_2 :: second _1), third _1 )
# 428 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 45 "parser.mly"
               ( first _1, second _1, (_2 :: third _1) )
# 436 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
     ( { typ = _6;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _8;
	 body = List.rev _9 } )
# 451 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                  ( [] )
# 457 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 57 "parser.mly"
                  ( List.rev _1 )
# 464 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 60 "parser.mly"
                             ( [(_2,_1)] )
# 472 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 61 "parser.mly"
                             ( (_4,_3) :: _1 )
# 481 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
        ( Int )
# 487 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         ( Bool )
# 493 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
         ( Void )
# 499 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
            ( MyString )
# 505 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
              ( StructType (_2) )
# 512 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                     ( [] )
# 518 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 72 "parser.mly"
                     ( _2 :: _1 )
# 526 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 75 "parser.mly"
                   ( (_3, _2) )
# 534 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 79 "parser.mly"
      ( { sname = _2;
      formals = _4;
      } )
# 544 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                   ( [] )
# 550 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                   ( _2 :: _1 )
# 558 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
              ( Expr _1 )
# 565 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                ( Return Noexpr )
# 571 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                     ( Return _2 )
# 578 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
                            ( Block(List.rev _2) )
# 585 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 593 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                            ( If(_3, _5, _7) )
# 602 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 612 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 96 "parser.mly"
                                ( While(_3, _5) )
# 620 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                  ( Noexpr )
# 626 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                  ( _1 )
# 633 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 103 "parser.mly"
                     ( Literal(_1) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                     ( BoolLit(true) )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                     ( BoolLit(false) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                     ( Id(_1) )
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                ( MyStringLit(_1) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 746 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                     ( Dotop(_1, _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                               ( SAssign(_1, _3, _5) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                         ( Unop(Neg, _2) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Unop(Not, _2) )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Assign(_1, _3) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 125 "parser.mly"
                                 ( Call(_1, _3) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                       ( _2 )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                  ( [] )
# 822 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 130 "parser.mly"
                  ( List.rev _1 )
# 829 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                            ( [_1] )
# 836 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                            ( _3 :: _1 )
# 844 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
