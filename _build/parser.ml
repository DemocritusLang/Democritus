type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | INT
  | BOOL
  | VOID
  | STRTYPE
  | FUNCTION
  | STRUCT
  | STRING of (string)
  | LITERAL of (int)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 5 "parser.mly"
open Ast;;

let first (a,_,_) = a;;
let second (_,b,_) = b;;
let third (_,_,c) = c;;
# 48 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* INT *);
  284 (* BOOL *);
  285 (* VOID *);
  286 (* STRTYPE *);
  287 (* FUNCTION *);
  288 (* STRUCT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  289 (* STRING *);
  290 (* LITERAL *);
  291 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\004\000\007\000\007\000\
\010\000\010\000\006\000\006\000\006\000\006\000\006\000\008\000\
\008\000\003\000\005\000\009\000\009\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\013\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\014\000\014\000\015\000\
\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\010\000\000\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\002\000\000\000\
\002\000\003\000\005\000\000\000\002\000\002\000\002\000\003\000\
\003\000\005\000\007\000\009\000\005\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\004\000\003\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\058\000\000\000\011\000\012\000\013\000\014\000\
\000\000\000\000\001\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\016\000\018\000\000\000\
\000\000\000\000\000\000\000\000\019\000\017\000\009\000\000\000\
\000\000\016\000\000\000\000\000\010\000\000\000\000\000\020\000\
\006\000\000\000\000\000\033\000\034\000\000\000\000\000\000\000\
\036\000\032\000\000\000\021\000\000\000\000\000\000\000\049\000\
\050\000\023\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\025\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\
\000\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\030\000\013\000\014\000\015\000\027\000\025\000\
\038\000\028\000\052\000\053\000\082\000\084\000\085\000"

let yysindex = "\024\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\160\255\003\255\000\000\000\000\000\000\000\000\014\255\019\255\
\020\255\055\255\059\255\000\000\065\255\000\000\000\000\160\255\
\015\255\033\255\075\255\083\255\000\000\000\000\000\000\086\255\
\160\255\000\000\058\255\160\255\000\000\072\255\067\255\000\000\
\000\000\067\255\067\255\000\000\000\000\038\255\092\255\095\255\
\000\000\000\000\000\255\000\000\255\255\199\000\106\255\000\000\
\000\000\000\000\033\000\067\255\067\255\067\255\067\255\000\000\
\067\255\067\255\067\255\067\255\067\255\067\255\067\255\067\255\
\067\255\067\255\067\255\067\255\000\000\000\000\000\000\215\000\
\231\000\098\255\247\000\100\255\103\255\247\000\043\255\043\255\
\000\000\000\000\034\001\034\001\008\255\008\255\008\255\008\255\
\022\001\007\001\202\255\202\255\067\255\000\000\067\255\087\255\
\000\000\051\000\247\000\202\255\067\255\000\000\247\000\110\255\
\202\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\255\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\000\000\000\000\118\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\140\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\237\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\121\255\120\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\123\255\000\000\006\255\000\000\128\255\007\255\073\000\095\000\
\000\000\000\000\114\255\148\255\117\000\139\000\161\000\183\000\
\060\255\082\255\000\000\000\000\000\000\000\000\000\000\174\255\
\000\000\000\000\045\255\000\000\130\255\000\000\131\255\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\133\000\000\000\000\000\032\000\000\000\104\000\
\103\000\000\000\162\255\217\255\037\000\000\000\000\000"

let yytablesize = 564
let yytable = "\054\000\
\011\000\062\000\056\000\057\000\104\000\105\000\059\000\051\000\
\056\000\051\000\063\000\056\000\051\000\110\000\065\000\066\000\
\067\000\068\000\114\000\029\000\080\000\081\000\083\000\086\000\
\001\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\018\000\058\000\039\000\
\017\000\005\000\006\000\007\000\008\000\042\000\016\000\057\000\
\019\000\043\000\057\000\067\000\068\000\020\000\021\000\026\000\
\044\000\045\000\022\000\023\000\047\000\106\000\047\000\107\000\
\035\000\047\000\024\000\031\000\039\000\111\000\049\000\050\000\
\051\000\039\000\042\000\040\000\041\000\032\000\043\000\042\000\
\047\000\047\000\048\000\043\000\048\000\044\000\045\000\048\000\
\033\000\034\000\044\000\045\000\037\000\060\000\046\000\047\000\
\061\000\048\000\101\000\049\000\050\000\051\000\102\000\048\000\
\049\000\050\000\051\000\039\000\103\000\040\000\078\000\108\000\
\113\000\042\000\041\000\015\000\041\000\043\000\007\000\041\000\
\008\000\030\000\054\000\031\000\044\000\045\000\041\000\041\000\
\046\000\047\000\055\000\048\000\030\000\031\000\041\000\041\000\
\012\000\036\000\049\000\050\000\051\000\020\000\055\000\020\000\
\020\000\112\000\000\000\020\000\042\000\000\000\042\000\020\000\
\000\000\042\000\000\000\000\000\000\000\000\000\020\000\020\000\
\042\000\042\000\020\000\020\000\000\000\020\000\000\000\000\000\
\042\000\042\000\000\000\000\000\020\000\020\000\020\000\026\000\
\000\000\026\000\026\000\000\000\000\000\026\000\000\000\000\000\
\000\000\026\000\005\000\006\000\007\000\008\000\000\000\016\000\
\026\000\026\000\000\000\000\000\026\000\026\000\000\000\026\000\
\000\000\000\000\000\000\039\000\000\000\040\000\026\000\026\000\
\026\000\042\000\000\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\000\000\000\000\
\046\000\047\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\050\000\051\000\035\000\000\000\035\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\064\000\
\000\000\035\000\035\000\000\000\000\000\065\000\066\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\006\000\007\000\008\000\009\000\
\010\000\079\000\000\000\000\000\000\000\000\000\000\000\065\000\
\066\000\067\000\068\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\109\000\000\000\075\000\076\000\000\000\
\000\000\065\000\066\000\067\000\068\000\000\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000\000\000\000\000\075\000\
\076\000\037\000\000\000\037\000\000\000\000\000\037\000\037\000\
\037\000\000\000\000\000\000\000\000\000\037\000\037\000\037\000\
\037\000\037\000\037\000\000\000\000\000\037\000\037\000\038\000\
\000\000\038\000\000\000\000\000\038\000\038\000\038\000\000\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\043\000\000\000\043\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\043\000\043\000\044\000\000\000\044\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\044\000\045\000\000\000\045\000\000\000\000\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\045\000\045\000\046\000\
\000\000\046\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\077\000\000\000\046\000\046\000\065\000\066\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\099\000\000\000\075\000\076\000\065\000\066\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\100\000\000\000\075\000\076\000\065\000\066\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\065\000\066\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\076\000\065\000\066\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\000\000\000\000\075\000\065\000\066\000\067\000\068\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\065\000\066\000\067\000\068\000\000\000\000\000\000\000\000\000\
\071\000\072\000\073\000\074\000"

let yycheck = "\039\000\
\000\000\002\001\042\000\043\000\099\000\100\000\046\000\001\001\
\003\001\003\001\011\001\006\001\006\001\108\000\007\001\008\001\
\009\001\010\001\113\000\005\001\060\000\061\000\062\000\063\000\
\001\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\035\001\001\001\002\001\
\009\000\027\001\028\001\029\001\030\001\008\001\032\001\003\001\
\035\001\012\001\006\001\009\001\010\001\035\001\035\001\024\000\
\019\001\020\001\004\001\001\001\001\001\101\000\003\001\103\000\
\033\000\006\001\002\001\035\001\002\001\109\000\033\001\034\001\
\035\001\002\001\008\001\004\001\005\001\003\001\012\001\008\001\
\021\001\022\001\001\001\012\001\003\001\019\001\020\001\006\001\
\006\001\004\001\019\001\020\001\035\001\002\001\023\001\024\001\
\002\001\026\001\001\001\033\001\034\001\035\001\003\001\022\001\
\033\001\034\001\035\001\002\001\006\001\004\001\005\001\025\001\
\003\001\008\001\001\001\035\001\003\001\012\001\003\001\006\001\
\003\001\001\001\003\001\001\001\019\001\020\001\013\001\014\001\
\023\001\024\001\003\001\026\001\003\001\003\001\021\001\022\001\
\004\000\034\000\033\001\034\001\035\001\002\001\040\000\004\001\
\005\001\109\000\255\255\008\001\001\001\255\255\003\001\012\001\
\255\255\006\001\255\255\255\255\255\255\255\255\019\001\020\001\
\013\001\014\001\023\001\024\001\255\255\026\001\255\255\255\255\
\021\001\022\001\255\255\255\255\033\001\034\001\035\001\002\001\
\255\255\004\001\005\001\255\255\255\255\008\001\255\255\255\255\
\255\255\012\001\027\001\028\001\029\001\030\001\255\255\032\001\
\019\001\020\001\255\255\255\255\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\002\001\255\255\004\001\033\001\034\001\
\035\001\008\001\255\255\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\001\001\
\255\255\021\001\022\001\255\255\255\255\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\001\001\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\001\001\255\255\021\001\022\001\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\022\001\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\008\001\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\022\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\022\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\003\001\255\255\021\001\022\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\003\001\255\255\021\001\022\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\003\001\255\255\021\001\022\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRTYPE\000\
  FUNCTION\000\
  STRUCT\000\
  EOF\000\
  "

let yynames_block = "\
  STRING\000\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 38 "parser.mly"
            ( _1 )
# 366 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 ( [], [], [] )
# 372 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( (_2 :: first _1), second _1, third _1 )
# 380 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( first _1, (_2 :: second _1), third _1 )
# 388 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( first _1, second _1, (_2 :: third _1) )
# 396 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 48 "parser.mly"
     ( { typ = _2;
	 fname = _3;
	 formals = _5;
	 locals = List.rev _8;
	 body = List.rev _9 } )
# 411 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                  ( [] )
# 417 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 56 "parser.mly"
                  ( List.rev _1 )
# 424 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "parser.mly"
                             ( [(_1,_2)] )
# 432 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                             ( (_3,_4) :: _1 )
# 441 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
        ( Int )
# 447 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
         ( Bool )
# 453 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         ( Void )
# 459 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
            ( MyString )
# 465 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
              ( StructType )
# 472 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                     ( [] )
# 478 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 71 "parser.mly"
                     ( _2 :: _1 )
# 486 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 74 "parser.mly"
               ( (_1, _2) )
# 494 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    Obj.repr(
# 78 "parser.mly"
      ( { sname = _2;
      formals = _4;
      } )
# 504 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                   ( [] )
# 510 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                   ( _2 :: _1 )
# 518 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
              ( Expr _1 )
# 525 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                ( Return Noexpr )
# 531 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                     ( Return _2 )
# 538 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 90 "parser.mly"
                            ( Block(List.rev _2) )
# 545 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 553 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                            ( If(_3, _5, _7) )
# 562 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 572 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                                ( While(_3, _5) )
# 580 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                  ( Noexpr )
# 586 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                  ( _1 )
# 593 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 102 "parser.mly"
                     ( Literal(_1) )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                     ( BoolLit(true) )
# 606 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                     ( BoolLit(false) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                     ( Id(_1) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                ( MyStringLit(_1) )
# 626 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 634 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                         ( Unop(Neg, _2) )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Unop(Not, _2) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Assign(_1, _3) )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 122 "parser.mly"
                                 ( Call(_1, _3) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                       ( _2 )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                  ( [] )
# 765 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 127 "parser.mly"
                  ( List.rev _1 )
# 772 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                            ( [_1] )
# 779 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                            ( _3 :: _1 )
# 787 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
